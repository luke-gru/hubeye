#!/usr/bin/env ruby

# require environment and VERSION files
require File.join(File.expand_path(File.dirname(__FILE__) + "/../"), "lib/environment")
include Environment
require File.join(ROOTDIR, 'VERSION')

# standard lib
require 'optparse'
require 'ostruct'

unless File.exists? ENV['HOME'] + '/.hubeye'
  require 'rake'
  require 'stringio'

  def capture_stdout
    s = StringIO.new
    oldstdout = $stdout
    $stdout = s
    yield
    s.string
  ensure
    $stdout = oldstdout
  end

  require File.join(ROOTDIR, 'tasks/install')
  # Don't display the results
  results = capture_stdout { Rake.application['install'].invoke }

end

class Options
  def self.parse(args)

    # defaults
    options = OpenStruct.new
    options.server_wanted = true
    options.client_wanted = false
    options.server_daemonized = true
    options.port = 4545
    options.host = 'localhost'

    opts_saved = OptionParser.new do |opts|
      opts.banner = "Usage: hubeye [options]"
      opts.separator ""
      opts.separator "Specific options:"
      opts.separator "Note: The default port (for server and client) is 4545"

      opts.on("-s", "--server", "Start the server (default: daemonized process)") do
        options.client_wanted = false
        options.server_wanted = true
      end

      opts.on("-t", "--top", "Run server as non-daemonized (output to term)") do
        options.server_daemonized = false
      end

      opts.on("-o", "--host HOST", "Host that the client connects to. Default: 'localhost'") do |h|
        options.host = h
      end

      opts.on("-p", "--port PORT", "Port that the server runs on / client connects to") do |p|
        options.port = p.to_i
      end

      opts.on("-c", "--client", "Start hubeye client to interact with server.") do
        options.server_wanted = false
        options.client_wanted = true
      end

      opts.on_tail("-v", "--version", "Show hubeye version") do
        puts Hubeye::VERSION.join('.')
        exit
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end

    opts_saved.parse!(args)
    options
  end # end of Options::parse

end # end of class


class Hubeye
  class << self

    def start
      options = Options.parse(ARGV)
      host = options.host
      port = options.port
      daemonized = options.server_daemonized
      if options.server_wanted
        unless port_open?(port)
          puts "Other instances are running"
          exit 1
        end
        require File.join(LIBDIR, '/server/hubeye_server')
        options.server_daemonized ? start_server(port, :daemon => true) : start_server(port, :daemon => false)
      else
        require File.join(LIBDIR, '/client/hubeye_client')
        start_client(host, port)
      end
    end


    def port_open?(port)
      # this is the solution until multi-threading or forking is implemented
      # on the TCP server
      listening_tcps = `netstat -l --tcp --numeric`
      if /#{port}/ =~ listening_tcps
        return false
      end
      true
    end


    def start_server(port, options={})
      server = HubeyeServer.new(true) # debug: true
      if options[:daemon]
        Process.daemon(true) # don't change dir to '/'
      end
      server.start(port, options)
    end

    # client connection defaults to localhost:4545
    def start_client(host, port)
      client = HubeyeClient.new
      client.start(host, port)
    end

  end
end

Hubeye.start

