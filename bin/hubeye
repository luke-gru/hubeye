#!/usr/bin/env ruby

# require environment file
require File.join(File.dirname(__FILE__), "../lib/environment")

# standard lib
require 'optparse'
require 'ostruct'

# vendor
unless RUBY_VERSION >= '1.9'
  begin
    require 'daemons'
  rescue
    require 'rubygems'
    retry
  else
    RuntimeError.new "The daemons gem is needed to run hubeye as a daemon " +
                     "on Ruby < 1.9"
  end
end

class Hubeye
  VERSION = ['0','0','1']
end

class Options
  def self.parse(args)

    # defaults
    options = OpenStruct.new
    options.server_wanted = true
    options.client_wanted = (options.server_wanted ? false : true)
    options.server_daemonized = (options.server_wanted ? true : nil)
    options.port = 2000
    options.host = 'localhost'

    opts_saved = OptionParser.new do |opts|
      opts.banner = "Usage: hubeye [options]"
      opts.separator ""
      opts.separator "Specific options:"
      opts.separator "Note: The default port (for server and client) is 2000"

      opts.on("-s", "--server", "Start the server (default: daemonized process)") do
        options.server_daemonized = true
      end

      opts.on("-t", "--top", "Run server as non-daemonized (output to term)") do
        options.server_daemonized = false
      end

      opts.on("-o", "--host HOST", "Host that the client connects to. Default: 'localhost'") do |h|
        options.host = h
      end

      opts.on("-p", "--port PORT", "Port that the server runs on / client connects to") do |p|
        options.port = p.to_i
      end

      opts.on("-c", "--client", "Start hubeye client to interact with server.") do
        options.server_wanted = false
        options.client_wanted = true
      end

      opts.on_tail("-v", "--version", "Show hubeye version") do
        puts Hubeye::VERSION.join('.')
        exit
      end

      opts.on_tail("-h", "--help", "Show this message") do
        puts opts
        exit
      end
    end

    opts_saved.parse!(args)
    options
  end # end of Options::parse

end # end of class


class Hubeye
  class << self

    def start
      options = Options.parse(ARGV)
      host = options.host
      port = options.port
      daemonized = options.server_daemonized
      if options.server_wanted
        require File.join(Environment::LIBDIR, '/server/hubeye_server.rb')
        options.server_daemonized ? start_server(port, :daemon => true) : start_server(port, :daemon => false)
      else
        require File.join(Environment::LIBDIR, '/client/hubeye_client.rb')
        start_client(host, port)
      end
    end

    def start_server(port, options={})
      if options[:daemon]
        server = HubeyeServer.new(true) # debug: true
        Process.daemon(true) # don't change dir to '/'
        server.start(port, options)
      else
        server = HubeyeServer.new(true)
        server.start(port, options)
      end
    end

    def start_client(host, port)
      client = HubeyeClient.new
      client.start(host, port) # defaults to localhost:2000
    end

  end
end

Hubeye.start

# run server as daemon
#Daemons.run(File.join(Environment::LIBDIR, '/server/hubeye_server.rb'))
