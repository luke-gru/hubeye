#!/usr/bin/env ruby

require File.expand_path("../../lib/hubeye/config/environment", __FILE__)

module Hubeye
  include Environment
  require File.join(ROOTDIR, 'version')

  require 'optparse'
  require 'ostruct'

  unless File.exists?(File.join(ENV['HOME'],'.hubeye'))
    require 'rake'
    require File.join(ROOTDIR, 'tasks', 'install')
    Rake.application['install'].invoke
  end

  class Options
    DEFAULT_PORT = 4545

    def self.parse(args)

      # defaults
      options = OpenStruct.new
      options.server_wanted = true
      options.client_wanted = false
      options.server_daemonized = true
      options.port = DEFAULT_PORT
      options.host = 'localhost'

      opts_saved = OptionParser.new do |opts|
        opts.banner = "Usage: hubeye [options]"
        opts.separator ""
        opts.separator "Note: The default port (for server and client) is #{DEFAULT_PORT}"
        opts.separator "      The default host (for server and client) is localhost"
        opts.separator ""
        opts.separator "Specific options:"

        opts.on("-s", "--server", "Start the server (default: daemonized)") do
          options.client_wanted = false
          options.server_wanted = true
        end

        opts.on("-t", "--top", "Run server process in terminal") do
          options.server_daemonized = false
        end

        opts.on("-o", "--host HOST", "Host that the server runs on / client connects to") do |h|
          options.host = h
        end

        opts.on("-p", "--port PORT", "Port that the server runs on / client connects to") do |p|
          options.port = p.to_i
        end

        opts.on("-c", "--client", "Start hubeye client to interact with server") do
          options.server_wanted = false
          options.client_wanted = true
        end

        opts.on_tail("-v", "--version", "Show hubeye version") do
          puts VERSION.join('.')
          exit
        end

        opts.on_tail("-h", "--help", "Show this message") do
          puts opts
          exit
        end
      end

      opts_saved.parse!(args)
      options
    end # end of Options::parse

  end # end of class

  class << self

    def start
      options = Options.parse(ARGV)
      host = options.host
      port = options.port
      if options.server_wanted
        unless port_open?(port)
          puts "A service is already running on this port"
          exit 1
        end
        require File.join('hubeye', 'server', 'server')
        start_server(port, :daemon => options.server_daemonized)
      else
        # move this to client script
        ['INT', 'KILL'].each do |sig|
          trap(sig) { STDOUT.print("\n"); exit 1 }
        end
        require File.join('hubeye', 'client', 'client')
        start_client(host, port)
      end
    end

    def port_open?(port)
      # will change this to a more platform-agnostic method, like
      # rescuing busy port exceptions.
      listening_tcps = `netstat -l --tcp --numeric`
      if /#{port}/ =~ listening_tcps
        return false
      end
      true
    end

    def start_server(port, options={})
      server = Server::Server.new(true) # debug
      if options[:daemon]
        Process.daemon(true) # don't change dir to '/'
      end
      server.start(port, options)
    end

    def start_client(host, port)
      client = Client::Client.new(false) # debug
      client.start(host, port)
    end

  end
end

Hubeye.start
